# This program simulates balls moving on a frictionless surface.
# by David Pick

from graphics import *
from time import sleep
from random import randrange, random
from math import *

# Nearly constants: tuning parameters to adjust the simulation.
# All length values in pixels unless otherwise noted.
CONTAINER_WIDTH, CONTAINER_HEIGHT = 800, 600
BALL_RADIUS = 15
TIME_STEP = 0.01 # in seconds
MaxV = 500
COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'violet' ]
numBalls = 10
position = [0] * numBalls
for i in range(numBalls):
    position[i] = [0, 0]

class Ball:
    """This class represents a card from a standard deck."""
    def __init__(self, win):
        #Give ball random X and Y position and random velocity
        self.getX = randrange(800 - BALL_RADIUS)
        self.getY = randrange(600 - BALL_RADIUS)
        self.Vx = randrange(-MaxV, MaxV)
        self.Vy = randrange(-MaxV, MaxV)
        self.circle = Circle(Point(self.getX, self.getY), BALL_RADIUS)
        self.circle.setFill(COLORS[randrange(0,6)])
        self.circle.draw(win)

    def __str__(self):
        return self.getX, self.getY
    
    def timePasses(self, time):
        if self.circle.getCenter().getX() > 100:
            X = self.circle.getCenter().getX() + BALL_RADIUS
        else:
            X = self.circle.getCenter().getX() - BALL_RADIUS
        if self.circle.getCenter().getY() > 100:
            Y = self.circle.getCenter().getY() + BALL_RADIUS
        else:
            Y = self.circle.getCenter().getY() - BALL_RADIUS
        
#        X = self.circle.getCenter().getX() + BALL_RADIUS
#        Y = self.circle.getCenter().getY() + BALL_RADIUS

        #Check to see if any balls hit the edge and if so, have them reverse direction
        if 0 > X or X > CONTAINER_WIDTH:
            print "Left or Right"
            self.Vx = -self.Vx
            self.Vy = self.Vy
            self.circle.setFill(COLORS[randrange(0,6)])
        elif 0 > Y or Y > CONTAINER_HEIGHT:
            print "Top or Bottom"
            self.Vx = self.Vx
            self.Vy = -self.Vy
            self.circle.setFill(COLORS[randrange(0,6)])
        elif 0 > X or X > CONTAINER_WIDTH and 0 > Y or Y > CONTAINER_HEIGHT:
            print "Corner"
            self.Vx = -self.Vx
            self.Vy = -self.Vy
            self.circle.setFill(COLORS[randrange(0,6)])
        
        changeX = self.Vx * time
        changeY = self.Vy * time
            
        self.circle.move(changeX, changeY)
        #print changeX, changeY
    
    def positionX(self):
        return self.circle.getCenter().getX()
    
    def positionY(self):
        return self.circle.getCenter().getY()
    
    def checkBounce(self, otherBall):
        tempX = abs(self.positionX() - otherBall.positionX())
        tempY = abs(self.positionY() - otherBall.positionY())
        
        distance = sqrt( tempX*tempX + tempY*tempY )
        
        if distance <= 2*BALL_RADIUS and abs(self.positionX() - otherBall.positionX()) != 0:
            self.bounce()
    
    def bounce(self):
        self.Vx = -self.Vx
        self.Vy = -self.Vy        
        
def simulate(window):
    #Create ball list
    ball = [0] * numBalls
    for i in range(numBalls):
        #create numBalls number of new instances of ball and load them into the list
        ball[i] = Ball(window)
    lastClick = window.checkMouse()
    while lastClick == None:
        sleep(TIME_STEP)
        for tempBall1 in ball:
            for tempBall2 in ball:
                if tempBall1 != tempBall2:
                    tempBall1.checkBounce(tempBall2)
        for i in range(numBalls):
            #tell each ball to move
            ball[i].timePasses(TIME_STEP)
        lastClick = window.checkMouse()

#To do this I would write a function that would check each balls position every TIME_STEP, these position would be loaded into a list
#corresponding to each balls number in the ball list. Then I would loop through the list and see if any balls were touching, if they were I
#reverse their velocities.

def main():
    window = GraphWin('Rolling, Rolling, Rolling', CONTAINER_WIDTH, CONTAINER_HEIGHT)
    msg = Text(Point(CONTAINER_WIDTH/2, CONTAINER_HEIGHT - 10), 'Click to begin simulation')
    msg.draw(window)
    window.getMouse()
    msg.setText('Click to exit')
    simulate(window)
    window.close()
    
if __name__ == '__main__':
    main()