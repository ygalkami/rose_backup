import java.awt.geom.Point2D;


public class TestBlock {
	
	public TestBlock(PreviousConfig array, Block current) {
//		System.out.println(array.configuration.length);
		findmoves(current, array);
//		System.out.println(this.hash(array.configuration));
	}
	
	public int hash(Block[] current) {
		// calculate the hash code for the block
		int sum = 0;
		int blocksum = 0;
		int prime = 257;
		for (Block a : current) {
			System.out.print(sum + " ");
			if (a == null)
				break;
			blocksum += a.col * prime;
			blocksum += a.row;
			blocksum *= prime;
			blocksum += a.height;
			blocksum *= prime;
			blocksum += a.width;
			blocksum *= prime;
			sum += blocksum >> 11;
			blocksum = 0;
		}
		return Math.abs(sum);
	}
	
	public boolean findmoves(Block current, PreviousConfig config) {
		int row = current.row;
		int col = current.col;
		int width = current.width;
		int height = current.height;
		int relativeWidth = col + width;
		int moveleft = 0; int moveright = 0; int moveup = 0; int movedown = 0;
		for (Block a : config.configuration) {
			if (a != null && a.equals(current) == false) {
					for (int i = row; i < row + height; i++) {
						for (int j = col; j < col + width; j++) {
							if (moveright == 0 && a.contains(new Point2D.Double(i, (j + 1))) || (j + 1) >= 4) {
								moveright++;
							}
							
							if (moveleft == 0 && a.contains(new Point2D.Double(i, (j - 1))) || (j - 1) < 0) {
								moveleft++;
							}
							
							if (movedown == 0 && a.contains(new Point2D.Double((i + 1), j)) || (i + 1) >= 5) {
								movedown++;
							}
							
							if (moveup == 0 && a.contains(new Point2D.Double((i - 1), j)) || (i - 1) < 0) {
								moveup++;
							}
							if (moveleft > 0 && moveright > 0 && moveup > 0 && movedown > 0)
								break;
						}
						if (moveleft > 0 && moveright > 0 && moveup > 0 && movedown > 0)
							break;
					}
				if (moveleft > 0 && moveright > 0 && moveup > 0 && movedown > 0)
					break;
			}
		}
		
		System.out.println(moveright + " " + moveleft + " " + movedown + " " + moveup + " " + current);
		
//		if (moveright == numblocks - 1)
//			currentconfig.getFirst().moves.add(new Move(row, col, row, col + 1, current));
//		if (moveleft == numblocks - 1)
//			currentconfig.getFirst().moves.add(new Move(row, col, row, col - 1, current));
//		if (movedown == numblocks - 1)
//			currentconfig.getFirst().moves.add(new Move(row, col, row + 1, col, current));
//		if (moveup == numblocks - 1)
//			currentconfig.getFirst().moves.add(new Move(row, col, row - 1, col, current));
//		System.out.println("Find Moves End: " + System.currentTimeMillis());
		return true;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		Block a = new Block(2, 0, 3, 0);
//		System.out.println(a.contains(new Point2D.Double(3, 0)));
//		System.out.println(a.contains(new Point2D.Double(0, 0)));
//		System.out.println(a.contains(new Point2D.Double(1, 1)));
//		System.out.println(a.contains(new Point2D.Double(0, 1)));
//		System.out.println(a.contains(new Point2D.Double(1, 0)));
//		System.out.println(a.contains(new Point2D.Double(2, 2)));
		Block b = new Block(1, 1, 2, 0);
//		if (b.equals(a)) 
//			System.out.println("They are equal");
//		for (Point2D.Double point : b.allpoints) {
//			if (a.contains(point))
//				System.out.println("true");
//		}
//		System.out.println(a);
//		a.MoveDown();
//		System.out.println(a);
		
		Block[] array = new Block[9];
		array[0] = new Block(2, 2, 0, 0);
		array[1] = new Block(1, 2, 0, 2);
		array[2] = new Block(1, 2, 1, 2);
		array[3] = new Block(1, 1, 2, 0);
		array[4] = new Block(1, 1, 2, 2);
		array[5] = new Block(2, 1, 3, 0);
		array[6] = new Block(2, 1, 2, 1);
		array[7] = new Block(1, 2, 3, 2);
		array[8] = new Block(1, 2, 4, 1);
		
		Block[] array2 = new Block[9];
		array2[0] = new Block(2, 2, 0, 0);
		array2[1] = new Block(1, 2, 0, 2);
		array2[2] = new Block(1, 2, 1, 2);
		array2[3] = new Block(1, 1, 2, 0);
		array2[4] = new Block(1, 1, 2, 1);
		array2[5] = new Block(2, 1, 3, 0);
		array2[6] = new Block(2, 1, 3, 1);
		array2[7] = new Block(1, 2, 2, 2);
		array2[8] = new Block(1, 2, 4, 2);

		PreviousConfig config = new PreviousConfig(array);
		PreviousConfig config2 = new PreviousConfig(array2);
		
//		TestBlock test = new TestBlock(config, array[0]);
//		TestBlock test2 = new TestBlock(config2, array2[0]);
		for (int i = 0; i < 9; i++) {
			TestBlock test = new TestBlock(config, array[i]);
		}
	}

}
