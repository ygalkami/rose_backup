-- Imports the IO library for printing
import IO

-- Factorial example
fact 0 = 1
fact n = n * fact(n-1)

-- DEFINE YOUR FUNCTIONS HERE
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci(n - 1) + fibonacci(n - 2)

fastFib_help 0 prev = fst prev
fastFib_help 1 prev = (snd prev)
fastFib_help n prev = fastFib_help (n - 1) ((snd prev), (fst prev) + (snd prev))

fastFib n = fastFib_help n (0, 1)

firstN n [] = []
firstN 0 xs = []
firstN n (x:xs) = [x] ++ firstN (n - 1) xs

haar_avgs (x:y:[]) = [((x + y) / 2)]
haar_avgs (x:y:xs) = [((x + y) / 2)] ++ haar_avgs xs

haar_coeffs (x:y:[]) = [((x - y) / 2)]
haar_coeffs (x:y:xs) = [((x - y) / 2)] ++ haar_coeffs xs

haar_count xs 0 = xs
haar_count xs x = haar_count ((haar_avgs xs) ++ (haar_coeffs xs)) (x - 1)

haar [] = []
haar xs = haar_count xs ((log (fromIntegral (length xs))) / (log (fromIntegral (2))))


-- Defines the no-argument test function to run the tests, you
-- still need to invoke it in the interpreter.  You'll need to 
-- uncomment the lines below as you implement additional functions.
test = do
    putStrLn "Factorial"
    putStrLn ("fact 5 = " ++ show (fact 5))
    putStrLn "Fibonacci, the slow way"
    putStrLn ("fibonacci 0 = " ++ show (fibonacci 0))
    putStrLn ("fibonacci 1 = " ++ show (fibonacci 1))
    putStrLn ("fibonacci 10 = " ++ show (fibonacci 10))
    putStrLn ("fibonacci 20 = " ++ show (fibonacci 20))
    putStrLn ("fibonacci 25 = " ++ show (fibonacci 25))
    putStrLn "Fibonacci, the fast way"
    putStrLn ("fastFib 0 = " ++ show (fastFib 0))
    putStrLn ("fastFib 1 = " ++ show (fastFib 1))
    putStrLn ("fastFib 10 = " ++ show (fastFib 10))
    putStrLn ("fastFib 20 = " ++ show (fastFib 20))
    putStrLn ("fastFib 25 = " ++ show (fastFib 25))
    putStrLn "firstN"
    putStrLn ("firstN 10 [] = " ++ show(firstN 10 []::[Int]))
    putStrLn ("firstN 10 [1] = " ++ show(firstN 10 [1]))
    putStrLn ("firstN 10 \"cat\" = " ++ show(firstN 10 "cat"))
    putStrLn ("firstN 2 \"cat\" = " ++ show(firstN 2 "cat"))
    putStrLn ("firstN 0 \"cat\" = " ++ show(firstN 0 "cat"))
    putStrLn ("firstN 0 [] = " ++ show(firstN 0 []::[Int]))

-- putStrLn is the function to display a string on a line
-- The '++' operator does list, or in this case string, concatenation
-- The show function converts values to strings.
