;Assignment 3 written by David Pick 3/15/09
;Problem 1
(define matrix-row
  (lambda (m row)
    (- row 1)
    (if (equal? row 0)
        (car m)
        (matrix-row (cdr m) (- row 1)))))

(define matrix-col
  (lambda (row col)
    (- col 1)
    (if (equal? col 0)
        (car row)
        (matrix-col (cdr row) (- col 1)))))

(define matrix-ref
  (lambda (m row col)
    (matrix-col (matrix-row m row) col)))

;Problem 2
(define max-edges
  (lambda (n)
    (/ (* n (- n 1)) 2)))

;Problem 3
(define complete?
  (lambda (lst)
    (if (null? lst)
        #t
        (complete?-help (- (length lst) 1) lst))))

(define complete?-help
  (lambda (n lst)
    (if (null? lst)
        #t
        (if (equal? (length (cadr (car lst))) n)
            (complete?-help n (cdr lst))
            #f))))

;Problem 4
(define complete
  (lambda (lst)
    (if (null? lst)
        '()
        (complete-help lst lst))))

(define complete-help
  (lambda (lst lst2)
    (if (null? lst)
        lst
        (cons (cons (car lst) (list (remove (car lst) lst2))) (complete-help (cdr lst) lst2)))))

(define (remove element list)
  (cond ((null? list) list)
       ((equal? element (car list)) (cdr list))
       (else (cons (car list) (remove element (cdr list))))))

;Problem 5
(define choose
  (lambda (n k)
    (/ (fact n) (* (fact k) (fact (- n k))))))

(define fact
  (lambda (n)
    (if (= n 0)
        1
        (* n (fact (- n 1))))))

(define pascal-triangle-row
  (lambda (row)
    (cons 1 (reverse (pascal-triangle-row-help row row)))))

(define pascal-triangle-row-help
  (lambda (row row2)
    (if (equal? row2 0)
        '()
        (append (pascal-triangle-row-help row (- row2 1)) (list (choose row (- row2 1)))))))

(define pascal-triangle-help
  (lambda (row)
    (if (equal? row 0)
        '()
        (append (pascal-triangle-help (- row 1)) (list (pascal-triangle-row (- row 1)))))))

(define pascal-triangle
  (lambda (row)
    (+ row 1)
    (if (< row 0)
        '()
        (reverse (append (pascal-triangle-help row) (list (pascal-triangle-row row)))))))

;The big theta of my algorithm is n^4, because choose is a O(n) algorithm, pascal-triangle-row-help is a O(n^2)
;and pascal-triangle-help is a O(n) algorithm
;however each of these functions could run in constant time when asked for the first row of pascals triangle, but most of the time, they run at the stated times, so the big-theta is n^4
;The theoretical minium big-theta running time for any code that produces the first N rows of
;pascal's triangle is N^2, because each row of the triangle can be generated by adding to the row
;that came before it, this requires N+1 additions per row. 